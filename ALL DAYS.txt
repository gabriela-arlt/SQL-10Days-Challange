++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DAY 3++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CREATE TABLE Warehouses (
   Code INTEGER NOT NULL,
   Location VARCHAR(255) NOT NULL ,
   Capacity INTEGER NOT NULL,
   PRIMARY KEY (Code)
 );
CREATE TABLE Boxes (
    Code CHAR(4) NOT NULL,
    Contents VARCHAR(255) NOT NULL ,
    Value REAL NOT NULL ,
    Warehouse INTEGER NOT NULL,
    PRIMARY KEY (Code)
 );
 
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(1,'Chicago',3);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(2,'Chicago',4);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(3,'New York',7);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(4,'Los Angeles',2);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(5,'San Francisco',8);
 
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('0MN7','Rocks',180,3);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4H8P','Rocks',250,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4RT3','Scissors',190,4);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('7G3H','Rocks',200,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8JN6','Papers',75,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8Y6U','Papers',50,3);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('9J6F','Papers',175,2);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('LL08','Rocks',140,4);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P0H6','Scissors',125,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P2T6','Scissors',150,2);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('TU55','Papers',90,5);


--3.1 Select all warehouses.

SELECT *
FROM Warehouses;


--3.2 Select all boxes with a value larger than $150.

SELECT *
FROM Boxes
WHERE Value> 150;


--3.3 Select all distinct contents in all the boxes.

SELECT DISTINCT Contents
FROM Boxes;


--3.4 Select the average value of all the boxes.

SELECT AVG(Value)
FROM Boxes;

-- per content
SELECT AVG(Value), Contents
FROM Boxes
GROUP BY Contents;


--3.5 Select the warehouse code and the average value of the boxes in each warehouse.

SELECT Warehouse, AVG(Value)
FROM Boxes
GROUP BY Warehouse;


--3.6 Same as previous exercise, but select only those warehouses where the average value of the boxes is greater than 150.


SELECT Warehouse, AVG(Value)
FROM Boxes
GROUP BY Warehouse
HAVING AVG(Value)>150;



--3.7 Select the code of each box, along with the name of the city the box is located in.




SELECT B.Code, W.Location
FROM Boxes B LEFT JOIN Warehouses W
ON B.Warehouse=W.Code;

--3.8 Select the warehouse codes, along with the number of boxes in each warehouse. 

SELECT Warehouse, COUNT(*) AS Count_of_boxes
FROM Boxes
GROUP BY Warehouse;


--3.9 Select the codes of all warehouses that are saturated (a warehouse is saturated if the number of boxes in it is larger than the warehouse's capacity).

SELECT B.Warehouse
FROM (SELECT Warehouse, COUNT(*) AS Count_of_boxes FROM Boxes GROUP BY Warehouse) AS B JOIN Warehouses AS W 
ON B.Warehouse=W.Code
WHERE B.Count_of_boxes> W.Capacity;


--3.10 Select the codes of all the boxes located in Chicago.

SELECT B.Code
FROM Boxes B LEFT JOIN Warehouses W
ON B.Warehouse=W.Code
WHERE W.Location='Chicago';

--3.11 Create a new warehouse in New York with a capacity for 3 boxes.

 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(NULL,'New York',3);

--3.12 Create a new box, with code "H5RT", containing "Papers" with a value of $200, and located in warehouse 2.

INSERT INTO Boxes VALUES ('H5RT','Papers',200,2);

--3.13 Reduce the value of all boxes by 15%.

-- Step 1: Add a new column
ALTER TABLE Boxes ADD COLUMN Discount15 REAL;

-- Step 2: Update the new column
UPDATE Boxes SET Discount15 = Value * 0.85;

-- 3.14 Delete all records of boxes from saturated warehouses (no boxes were harmed).

DELETE FROM Boxes
WHERE Warehouse IN (
    SELECT B.Warehouse
    FROM (
        SELECT Warehouse, COUNT(*) AS Count_of_boxes
        FROM Boxes
        GROUP BY Warehouse
    ) AS B
    JOIN Warehouses W ON B.Warehouse = W.Code
    WHERE B.Count_of_boxes > W.Capacity
);


--3.15 Remove all boxes with a value lower than $100.

DELETE FROM Boxes
WHERE Value <100;



-- 3.16 Add Index for column "Warehouse" in table "boxes"
    -- !!!NOTE!!!: index should NOT be used on small tables in practice
	
CREATE INDEX warehouse_index 
ON Boxes(Warehouse);
	
	
-- 3.17 Print all the existing indexes
    -- !!!NOTE!!!: index should NOT be used on small tables in practice
	
	
	-- Print all the existing indexes
SELECT * 
FROM sqlite_schema
WHERE type = "index";
	
	
-- 3.18 Remove (drop) the index you added just
    -- !!!NOTE!!!: index should NOT be used on small tables in practice
	
	-- Remove (drop) the index you added just created
DROP INDEX warehouse_index;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DAY 4++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



CREATE TABLE IF NOT EXISTS Movies (
  Code INTEGER,
  Title VARCHAR(255) NOT NULL,
  Rating VARCHAR(255),
  PRIMARY KEY (Code)
);

CREATE TABLE IF NOT EXISTS MovieTheaters (
  Code INTEGER,
  Name VARCHAR(255) NOT NULL,
  Movie INTEGER,
  PRIMARY KEY (Code)
  );

INSERT INTO Movies(Code,Title,Rating) VALUES(1,'Citizen Kane','PG');
INSERT INTO Movies(Code,Title,Rating) VALUES(2,'Singin'' in the Rain','G');
INSERT INTO Movies(Code,Title,Rating) VALUES(3,'The Wizard of Oz','G');
INSERT INTO Movies(Code,Title,Rating) VALUES(4,'The Quiet Man',NULL);
INSERT INTO Movies(Code,Title,Rating) VALUES(5,'North by Northwest',NULL);
INSERT INTO Movies(Code,Title,Rating) VALUES(6,'The Last Tango in Paris','NC-17');
INSERT INTO Movies(Code,Title,Rating) VALUES(7,'Some Like it Hot','PG-13');
INSERT INTO Movies(Code,Title,Rating) VALUES(8,'A Night at the Opera',NULL);
 
INSERT INTO MovieTheaters(Code,Name,Movie) VALUES(1,'Odeon',5);
INSERT INTO MovieTheaters(Code,Name,Movie) VALUES(2,'Imperial',1);
INSERT INTO MovieTheaters(Code,Name,Movie) VALUES(3,'Majestic',NULL);
INSERT INTO MovieTheaters(Code,Name,Movie) VALUES(4,'Royale',6);
INSERT INTO MovieTheaters(Code,Name,Movie) VALUES(5,'Paraiso',3);
INSERT INTO MovieTheaters(Code,Name,Movie) VALUES(6,'Nickelodeon',NULL);


-- 4.1 Select the title of all movies.

SELECT Title
FROM Movies;

-- 4.2 Show all the distinct ratings in the database.

SELECT DISTINCT Rating
FROM Movies;


-- 4.3 Show all unrated movies.

SELECT *
FROM Movies
WHERE Rating is NULL;


-- 4.4 Select all movie theaters that are not currently showing a movie.

SELECT Name
FROM MovieTheaters
WHERE Movie is null;


-- 4.5 Select all data from all movie theaters and, additionally, the data from the movie that is being shown in the theater (if one is being shown).

SELECT *
FROM MovieTheaters AS MT LEFT JOIN Movies AS M
ON M.Code=MT.Movie
WHERE MT.Movie is not null;


-- 4.6 Select all data from all movies and, if that movie is being shown in a theater, show the data from the theater.

SELECT *
FROM Movies AS M LEFT JOIN MovieTheaters AS MT 
ON M.Code=MT.Movie
WHERE MT.Name is not null;

-- 4.7 Show the titles of movies not currently being shown in any theaters.

SELECT M.Title, MT.Name
FROM Movies AS M LEFT JOIN MovieTheaters AS MT 
ON M.Code=MT.Movie
WHERE MT.Name is NULL;


-- 4.8 Add the unrated movie "One, Two, Three".


INSERT INTO Movies(Code,Title,Rating) VALUES(NULL,'One, Two, Three',NULL);


-- 4.9 Set the rating of all unrated movies to "G".

UPDATE Movies
SET Rating = 'G'
WHERE Rating IS NULL;

-- 4.10 Remove movie theaters projecting movies rated "NC-17".

--finding the MT
SELECT MT.Name FROM MovieTheaters AS MT LEFT JOIN Movies AS M
ON M.Code=MT.Movie
WHERE M.Rating='NC-17';

DELETE FROM MovieTheaters
WHERE Name IN (SELECT MT.Name FROM MovieTheaters AS MT LEFT JOIN Movies AS M
ON M.Code=MT.Movie
WHERE M.Rating='NC-17');


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DAY 5+++++++++++++++++++++++++++++++++++++++++++++++++++++++

CREATE TABLE Pieces (
 Code INTEGER NOT NULL,
 Name TEXT NOT NULL,
 PRIMARY KEY (Code)
 );
CREATE TABLE Providers (
 Code VARCHAR(40) NOT NULL,  
 Name TEXT NOT NULL,
PRIMARY KEY (Code) 
 );
CREATE TABLE Provides (
 Piece INTEGER, 
 Provider VARCHAR(40), 
 Price INTEGER NOT NULL,
 PRIMARY KEY(Piece, Provider) 
 );
 

INSERT INTO Providers(Code, Name) VALUES('HAL','Clarke Enterprises');
INSERT INTO Providers(Code, Name) VALUES('RBT','Susan Calvin Corp.');
INSERT INTO Providers(Code, Name) VALUES('TNBC','Skellington Supplies');

INSERT INTO Pieces(Code, Name) VALUES(1,'Sprocket');
INSERT INTO Pieces(Code, Name) VALUES(2,'Screw');
INSERT INTO Pieces(Code, Name) VALUES(3,'Nut');
INSERT INTO Pieces(Code, Name) VALUES(4,'Bolt');


INSERT INTO Provides(Piece, Provider, Price) VALUES(1,'RBT',15);
INSERT INTO Provides(Piece, Provider, Price) VALUES(2,'HAL',20);
INSERT INTO Provides(Piece, Provider, Price) VALUES(2,'RBT',15);
INSERT INTO Provides(Piece, Provider, Price) VALUES(2,'TNBC',14);
INSERT INTO Provides(Piece, Provider, Price) VALUES(3,'RBT',50);
INSERT INTO Provides(Piece, Provider, Price) VALUES(3,'TNBC',45);
INSERT INTO Provides(Piece, Provider, Price) VALUES(4,'HAL',5);
INSERT INTO Provides(Piece, Provider, Price) VALUES(4,'RBT',7);


-- 5.1 Select the name of all the pieces. 

SELECT Name
FROM Pieces;


-- 5.2  Select all the providers' data. 

SELECT *
FROM Providers;

-- 5.3 Obtain the average price of each piece (show only the piece code and the average price).

SELECT Piece, (CAST (AVG (Price) AS INT)) AS Avg_price
FROM Provides
GROUP BY Piece;


-- 5.4  Obtain the names of all providers who supply piece 1.


SELECT Providers.Name
FROM Provides LEFT JOIN Providers
ON Provides.Provider=Providers.Code
WHERE Provides.Piece=1;

-- 5.5 Select the name of pieces provided by provider with code "HAL".

SELECT Pieces.Name
FROM Provides LEFT JOIN Pieces
ON Provides.Piece=Pieces.Code
WHERE Provides.Provider='HAL';

INSERT
-- 5.6 For each piece, find the most expensive offering of that piece and include the piece name,
-- provider name, and price (note that there could be two providers who supply the same piece at the most expensive price)
-- Note: Insert a new record in the table to see if your query can be scaled up to answer the query if there are two providers who
-- supply the same piece at the most expensive price.

INSERT INTO Provides(Piece, Provider, Price) VALUES(3,'HAL',50);

WITH Provides_Pieces AS (
SELECT * 
FROM Provides LEFT JOIN Pieces
ON Provides.Piece=Pieces.Code),

Full_dataset AS (
SELECT *
FROM Provides_Pieces LEFT JOIN Providers
ON Provides_Pieces.Provider = Providers.Code)

SELECT Price, Provider, Name
FROM Full_dataset
WHERE Price IN (SELECT Max(Price)
FROM Provides
GROUP BY Piece);


-- 5.7 Add an entry to the database to indicate that "Skellington Supplies" (code "TNBC") will provide sprockets (code "1") for 7 cents each.


INSERT INTO Provides(Piece, Provider, Price) VALUES(1,'TNBC',7);


-- 5.8 Increase all prices by one cent.

ALTER TABLE Provides
ADD Reduced_price_by_1 INT;

UPDATE Provides
SET Reduced_price_by_1=Price - 1;


-- 5.9 Update the database to reflect that "Susan Calvin Corp." (code "RBT") will not supply bolts (code 4).

DELETE FROM Provides
WHERE Provider ='RBT' AND Piece= 4;

-- 5.10 Update the database to reflect that "Susan Calvin Corp." (code "RBT") will not supply any pieces (the provider should still remain in the database).

DELETE FROM Provides
WHERE Provider ='RBT';




++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DAY 6++++++++++++++++++++++++++++++++++++++++++++++++++++++++


CREATE TABLE Scientists (
  SSN int,
  Name Char(30) not null,
  Primary Key (SSN)
);

CREATE TABLE Projects (
  Code Char(4),
  Name Char(50) not null,
  Primary Key (Code)
);
	
CREATE TABLE AssignedTo (
  Scientist int not null,
  Project char(4) not null,
  Hours int,
  Primary Key (Scientist, Project)
);

INSERT INTO Scientists(SSN,Name) 
VALUES(123234877,'Michael Rogers'),
(152934485,'Anand Manikutty'),
(222364883, 'Carol Smith'),
(326587417,'Joe Stevens'),
(332154719,'Mary-Anne Foster'),	
(332569843,'George ODonnell'),
(546523478,'John Doe'),
(631231482,'David Smith'),
(654873219,'Zacary Efron'),
(745685214,'Eric Goldsmith'),
(845657245,'Elizabeth Doe'),
(845657246,'Kumar Swamy');

INSERT INTO Projects ( Code,Name)
VALUES ('AeH1','Winds: Studying Bernoullis Principle'),
('AeH2','Aerodynamics and Bridge Design'),
('AeH3','Aerodynamics and Gas Mileage'),
('AeH4','Aerodynamics and Ice Hockey'),
('AeH5','Aerodynamics of a Football'),
('AeH6','Aerodynamics of Air Hockey'),
('Ast1','A Matter of Time'),
('Ast2','A Puzzling Parallax'),
('Ast3','Build Your Own Telescope'),
('Bte1','Juicy: Extracting Apple Juice with Pectinase'),
('Bte2','A Magnetic Primer Designer'),
('Bte3','Bacterial Transformation Efficiency'),
('Che1','A Silver-Cleaning Battery'),
('Che2','A Soluble Separation Solution');

INSERT INTO AssignedTo ( Scientist, Project, Hours)
VALUES (123234877,'AeH1', 156),
(152934485,'AeH3',189),
(222364883,'Ast3', 256),	   
(326587417,'Ast3', 789),
(332154719,'Bte1', 98),
(546523478,'Che1',89),
(631231482,'Ast3',112),
(654873219,'Che1', 299),
(745685214,'AeH3', 6546),
(845657245,'Ast1', 321),
(845657246,'Ast2', 9684),
(332569843,'AeH4', 321);

Questions
-- 6.1 List all the scientists' names, their projects' names, 
    -- and the total hours worked on each project, 
    -- in alphabetical order of project name, then scientist name.
	
	
WITH Projects_Assigned_to AS (	
SELECT *
FROM Projects P LEFT JOIN AssignedTo A
ON P.Code=A.Project),

Full_Data AS (
SELECT PAT.Code, PAT.Name as Project_Name, PAT.Scientist, PAT.Project, PAT.Hours, S.SSN, S.Name AS Scientist_name
FROM Projects_Assigned_to PAT LEFT JOIN Scientists S
ON PAT.Scientist=S.SSN)

--SELECT Scientist_name, Project_name
--FROM Full_data
--WHERE Scientist_name not NULL;


   -- and the total hours worked on each project, 
--SELECT Project_name, SUM(Hours)
--From Full_data
--WHERE Scientist_name not NULL
--Group BY Project_name;
	
  -- in alphabetical order of project name, then scientist name.
SELECT Project_name,Scientist_name, SUM(Hours)
From Full_data
WHERE Scientist_name not NULL
Group BY Project_name, Scientist_name
Order By Project_name ASC, 
         Scientist_name ASC;

 
	
-- 6.2 Now list the project names and total hours worked on each, from most to least total hours.

SELECT P.Name, A.Hours
FROM AssignedTo A Left Join Projects P
ON P.Code = A. Project
ORDER BY A.Hours;


-- 6.3 Select the project names which are not assigned yet

SELECT P.Name
FROM Projects P LEFT JOIN AssignedTo A
ON P.Code = A. Project
WHERE A.Hours is NULL;
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DAY 7++++++++++++++++++++++++++++++++++++++++++++++


CREATE TABLE Employee (
  EmployeeID INTEGER,
  Name VARCHAR(255) NOT NULL,
  Position VARCHAR(255) NOT NULL,
  Salary REAL NOT NULL,
  Remarks VARCHAR(255),
  PRIMARY KEY (EmployeeID)
); 

CREATE TABLE Planet (
  PlanetID INTEGER,
  Name VARCHAR(255) NOT NULL,
  Coordinates REAL NOT NULL,
  PRIMARY KEY (PlanetID)
); 

CREATE TABLE Shipment (
  ShipmentID INTEGER,
  Date DATE,
  Manager INTEGER NOT NULL,
  Planet INTEGER NOT NULL,
  PRIMARY KEY (ShipmentID)
);

CREATE TABLE Has_Clearance (
  Employee INTEGER NOT NULL,
  Planet INTEGER NOT NULL,
  Level INTEGER NOT NULL,
  PRIMARY KEY(Employee, Planet)
); 

CREATE TABLE Client (
  AccountNumber INTEGER,
  Name VARCHAR(255) NOT NULL,
  PRIMARY KEY (AccountNumber)
);
  
CREATE TABLE Package (
  Shipment INTEGER NOT NULL,
  PackageNumber INTEGER NOT NULL,
  Contents VARCHAR(255) NOT NULL,
  Weight REAL NOT NULL,
  Sender INTEGER NOT NULL,
  Recipient INTEGER NOT NULL,
  PRIMARY KEY(Shipment, PackageNumber)
  );


INSERT INTO Client VALUES(1, 'Zapp Brannigan');
INSERT INTO Client VALUES(2, "Al Gore's Head");
INSERT INTO Client VALUES(3, 'Barbados Slim');
INSERT INTO Client VALUES(4, 'Ogden Wernstrom');
INSERT INTO Client VALUES(5, 'Leo Wong');
INSERT INTO Client VALUES(6, 'Lrrr');
INSERT INTO Client VALUES(7, 'John Zoidberg');
INSERT INTO Client VALUES(8, 'John Zoidfarb');
INSERT INTO Client VALUES(9, 'Morbo');
INSERT INTO Client VALUES(10, 'Judge John Whitey');
INSERT INTO Client VALUES(11, 'Calculon');
INSERT INTO Employee VALUES(1, 'Phillip J. Fry', 'Delivery boy', 7500.0, 'Not to be confused with the Philip J. Fry from Hovering Squid World 97a');
INSERT INTO Employee VALUES(2, 'Turanga Leela', 'Captain', 10000.0, NULL);
INSERT INTO Employee VALUES(3, 'Bender Bending Rodriguez', 'Robot', 7500.0, NULL);
INSERT INTO Employee VALUES(4, 'Hubert J. Farnsworth', 'CEO', 20000.0, NULL);
INSERT INTO Employee VALUES(5, 'John A. Zoidberg', 'Physician', 25.0, NULL);
INSERT INTO Employee VALUES(6, 'Amy Wong', 'Intern', 5000.0, NULL);
INSERT INTO Employee VALUES(7, 'Hermes Conrad', 'Bureaucrat', 10000.0, NULL);
INSERT INTO Employee VALUES(8, 'Scruffy Scruffington', 'Janitor', 5000.0, NULL);
INSERT INTO Planet VALUES(1, 'Omicron Persei 8', 89475345.3545);
INSERT INTO Planet VALUES(2, 'Decapod X', 65498463216.3466);
INSERT INTO Planet VALUES(3, 'Mars', 32435021.65468);
INSERT INTO Planet VALUES(4, 'Omega III', 98432121.5464);
INSERT INTO Planet VALUES(5, 'Tarantulon VI', 849842198.354654);
INSERT INTO Planet VALUES(6, 'Cannibalon', 654321987.21654);
INSERT INTO Planet VALUES(7, 'DogDoo VII', 65498721354.688);
INSERT INTO Planet VALUES(8, 'Nintenduu 64', 6543219894.1654);
INSERT INTO Planet VALUES(9, 'Amazonia', 65432135979.6547);
INSERT INTO Has_Clearance VALUES(1, 1, 2);
INSERT INTO Has_Clearance VALUES(1, 2, 3);
INSERT INTO Has_Clearance VALUES(2, 3, 2);
INSERT INTO Has_Clearance VALUES(2, 4, 4);
INSERT INTO Has_Clearance VALUES(3, 5, 2);
INSERT INTO Has_Clearance VALUES(3, 6, 4);
INSERT INTO Has_Clearance VALUES(4, 7, 1);
INSERT INTO Shipment VALUES(1, '3004/05/11', 1, 2);
INSERT INTO Shipment VALUES(2, '3004/05/11', 1, 2);
INSERT INTO Shipment VALUES(3, NULL, 2, 3);
INSERT INTO Shipment VALUES(4, NULL, 2, 4);
INSERT INTO Shipment VALUES(5, NULL, 7, 5);
INSERT INTO Package VALUES(1, 1, 'Undeclared', 1.5, 1, 2);
INSERT INTO Package VALUES(2, 1, 'Undeclared', 10.0, 2, 3);
INSERT INTO Package VALUES(2, 2, 'A bucket of krill', 2.0, 8, 7);
INSERT INTO Package VALUES(3, 1, 'Undeclared', 15.0, 3, 4);
INSERT INTO Package VALUES(3, 2, 'Undeclared', 3.0, 5, 1);
INSERT INTO Package VALUES(3, 3, 'Undeclared', 7.0, 2, 3);
INSERT INTO Package VALUES(4, 1, 'Undeclared', 5.0, 4, 5);
INSERT INTO Package VALUES(4, 2, 'Undeclared', 27.0, 1, 2);
INSERT INTO Package VALUES(5, 1, 'Undeclared', 100.0, 5, 1);



-- 7.1 Who received a 1.5kg package?

SELECT C.Name
FROM Package P JOIN Client C
ON C.AccountNUmber=P.Recipient
WHERE P.Weight=1.5;


    -- The result is "Al Gore's Head".

-- 7.2 What is the total weight of all the packages that he sent?

SELECT SUM(Weight)
FROM Package P JOIN Client C
ON C.AccountNUmber=P.Recipient
WHERE C.Name="Al Gore's Head";

-- Optional questions

-- 7.3 Retrieve the names of employees who have clearance level 4 or higher.

SELECT E.Name,  HC.Level
FROM Employee E LEFT JOIN Has_Clearance HC
ON E.EmployeeID=HC.Employee
WHERE HC.Level>=4;



-- 7.4 Rank the employees based on their salary in descending order, showing their names and positions alongside their rank. (Hint: Window Function)

SELECT Name, Position, DENSE_RANK() OVER (ORDER BY Salary DESC) AS RankBySalary
FROM Employee;


-- 7.5 Create a CTE to calculate the total weight of packages sent to each planet, 
--then join it with the Planet table to display the planet names and their corresponding total weights.

WITH Total_weight_per_shipment AS (
SELECT P.Shipment, SUM(P.Weight) AS Total_package_weight, SH.Planet
FROM Package P LEFT JOIN Shipment SH
ON P.Shipment=SH.ShipmentID
GROUP BY SH.Planet)

SELECT TSH.Total_package_weight, P.Name
FROM Total_weight_per_shipment TSH JOIN Planet P
ON TSH.Planet=P.PlanetID;



-- 7.6 Retrieve the names of employees who have shipped packages to planets that no other employee has shipped toWITH one AS (
WITH one AS(
SELECT *
From Shipment SH left join Employee E
ON SH.Manager=E.EmployeeID),

two AS (
SELECT one.Name as Employee_name, Planet.Name as Planet_name
FROM one left join Planet
ON one. Planet=Planet.PlanetID)


SELECT Planet_name, Employee_name, COUNT(DISTINCT Employee_name) AS NumEmployees
FROM two
GROUP BY Planet_name
HAVING COUNT(DISTINCT Employee_name) = 1;


-- 7.7 Retrieve the names of planets along with the number of shipments made to each planet, 
--but exclude planets where the total weight of packages sent is less than 20 units.


SELECT SUM(Weight) as total_weight, Count(ShipmentID), Name
FROM Shipment
JOIN  Package ON Package.Shipment=Shipment.ShipmentID
JOIN Planet ON Planet.PlanetID= Shipment.Planet
GROUP BY Planet
HAVING total_weight>20;


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DAY 8++++++++++++++++++++++++++++++++++++++++++++++++++++++


CREATE TABLE Physician (
EmployeeID INTEGER NOT NULL,
Name TEXT NOT NULL,
Position TEXT NOT NULL,
SSN INTEGER NOT NULL,
PRIMARY KEY (EmployeeID)
); 

CREATE TABLE Department (
DepartmentID INTEGER NOT NULL,
Name TEXT NOT NULL,
Head INTEGER NOT NULL,
PRIMARY KEY (DepartmentID)
);

CREATE TABLE Affiliated_With (
Physician INTEGER NOT NULL,
Department INTEGER NOT NULL,
PrimaryAffiliation BOOLEAN NOT NULL,
PRIMARY KEY(Physician, Department)
);

CREATE TABLE Procedures (
Code INTEGER NOT NULL,
Name TEXT NOT NULL,
Cost REAL NOT NULL,
PRIMARY KEY (Code)
);

CREATE TABLE Trained_In (
Physician INTEGER NOT NULL,
Treatment INTEGER NOT NULL,
CertificationDate DATETIME NOT NULL,
CertificationExpires DATETIME NOT NULL,
PRIMARY KEY(Physician, Treatment)
);

CREATE TABLE Patient (
SSN INTEGER NOT NULL,
Name TEXT NOT NULL,
Address TEXT NOT NULL,
Phone TEXT NOT NULL,
InsuranceID INTEGER NOT NULL,
PCP INTEGER NOT NULL,
PRIMARY KEY (SSN)
);

CREATE TABLE Nurse (
EmployeeID INTEGER NOT NULL,
Name TEXT NOT NULL,
Position TEXT NOT NULL,
Registered BOOLEAN NOT NULL,
SSN INTEGER NOT NULL,
PRIMARY KEY (EmployeeID)
);

CREATE TABLE Appointment (
AppointmentID INTEGER NOT NULL,
Patient INTEGER NOT NULL,
PrepNurse INTEGER,
Physician INTEGER NOT NULL,
Start DATETIME NOT NULL,
End DATETIME NOT NULL,
ExaminationRoom TEXT NOT NULL,
PRIMARY KEY (AppointmentID)
);

CREATE TABLE Medication (
Code INTEGER NOT NULL,
Name TEXT NOT NULL,
Brand TEXT NOT NULL,
Description TEXT NOT NULL,
PRIMARY KEY(Code)
);

CREATE TABLE Prescribes (
Physician INTEGER NOT NULL,
Patient INTEGER NOT NULL,
Medication INTEGER NOT NULL,
Date DATETIME NOT NULL,
Appointment INTEGER,
Dose TEXT NOT NULL,
PRIMARY KEY(Physician, Patient, Medication, Date)
);

CREATE TABLE Block (
Floor INTEGER NOT NULL,
Code INTEGER NOT NULL,
PRIMARY KEY(Floor, Code)
); 

CREATE TABLE Room (
Number INTEGER NOT NULL,
Type TEXT NOT NULL,
BlockFloor INTEGER NOT NULL,
BlockCode INTEGER NOT NULL,
Unavailable BOOLEAN NOT NULL,
PRIMARY KEY(Number)
);

CREATE TABLE On_Call (
Nurse INTEGER NOT NULL,
BlockFloor INTEGER NOT NULL,
BlockCode INTEGER NOT NULL,
Start DATETIME NOT NULL,
End DATETIME NOT NULL,
PRIMARY KEY(Nurse, BlockFloor, BlockCode, Start, End)
);

CREATE TABLE Stay (
StayID INTEGER NOT NULL,
Patient INTEGER NOT NULL,
Room INTEGER NOT NULL,
Start DATETIME NOT NULL,
End DATETIME NOT NULL,
PRIMARY KEY(StayID)
);

CREATE TABLE Undergoes (
Patient INTEGER NOT NULL,
Procedure INTEGER NOT NULL,
Stay INTEGER NOT NULL,
Date DATETIME NOT NULL,
Physician INTEGER NOT NULL,
AssistingNurse INTEGER,
PRIMARY KEY(Patient, Procedure, Stay, Date)
);


INSERT INTO Physician VALUES(1,'John Dorian','Staff Internist',111111111);
INSERT INTO Physician VALUES(2,'Elliot Reid','Attending Physician',222222222);
INSERT INTO Physician VALUES(3,'Christopher Turk','Surgical Attending Physician',333333333);
INSERT INTO Physician VALUES(4,'Percival Cox','Senior Attending Physician',444444444);
INSERT INTO Physician VALUES(5,'Bob Kelso','Head Chief of Medicine',555555555);
INSERT INTO Physician VALUES(6,'Todd Quinlan','Surgical Attending Physician',666666666);
INSERT INTO Physician VALUES(7,'John Wen','Surgical Attending Physician',777777777);
INSERT INTO Physician VALUES(8,'Keith Dudemeister','MD Resident',888888888);
INSERT INTO Physician VALUES(9,'Molly Clock','Attending Psychiatrist',999999999);

INSERT INTO Department VALUES(1,'General Medicine',4);
INSERT INTO Department VALUES(2,'Surgery',7);
INSERT INTO Department VALUES(3,'Psychiatry',9);

INSERT INTO Affiliated_With VALUES(1,1,1);
INSERT INTO Affiliated_With VALUES(2,1,1);
INSERT INTO Affiliated_With VALUES(3,1,0);
INSERT INTO Affiliated_With VALUES(3,2,1);
INSERT INTO Affiliated_With VALUES(4,1,1);
INSERT INTO Affiliated_With VALUES(5,1,1);
INSERT INTO Affiliated_With VALUES(6,2,1);
INSERT INTO Affiliated_With VALUES(7,1,0);
INSERT INTO Affiliated_With VALUES(7,2,1);
INSERT INTO Affiliated_With VALUES(8,1,1);
INSERT INTO Affiliated_With VALUES(9,3,1);

INSERT INTO Procedures VALUES(1,'Reverse Rhinopodoplasty',1500.0);
INSERT INTO Procedures VALUES(2,'Obtuse Pyloric Recombobulation',3750.0);
INSERT INTO Procedures VALUES(3,'Folded Demiophtalmectomy',4500.0);
INSERT INTO Procedures VALUES(4,'Complete Walletectomy',10000.0);
INSERT INTO Procedures VALUES(5,'Obfuscated Dermogastrotomy',4899.0);
INSERT INTO Procedures VALUES(6,'Reversible Pancreomyoplasty',5600.0);
INSERT INTO Procedures VALUES(7,'Follicular Demiectomy',25.0);

INSERT INTO Patient VALUES(100000001,'John Smith','42 Foobar Lane','555-0256',68476213,1);
INSERT INTO Patient VALUES(100000002,'Grace Ritchie','37 Snafu Drive','555-0512',36546321,2);
INSERT INTO Patient VALUES(100000003,'Random J. Patient','101 Omgbbq Street','555-1204',65465421,2);
INSERT INTO Patient VALUES(100000004,'Dennis Doe','1100 Foobaz Avenue','555-2048',68421879,3);

INSERT INTO Nurse VALUES(101,'Carla Espinosa','Head Nurse',1,111111110);
INSERT INTO Nurse VALUES(102,'Laverne Roberts','Nurse',1,222222220);
INSERT INTO Nurse VALUES(103,'Paul Flowers','Nurse',0,333333330);

INSERT INTO Appointment VALUES(13216584,100000001,101,1,'2008-04-24 10:00','2008-04-24 11:00','A');
INSERT INTO Appointment VALUES(26548913,100000002,101,2,'2008-04-24 10:00','2008-04-24 11:00','B');
INSERT INTO Appointment VALUES(36549879,100000001,102,1,'2008-04-25 10:00','2008-04-25 11:00','A');
INSERT INTO Appointment VALUES(46846589,100000004,103,4,'2008-04-25 10:00','2008-04-25 11:00','B');
INSERT INTO Appointment VALUES(59871321,100000004,NULL,4,'2008-04-26 10:00','2008-04-26 11:00','C');
INSERT INTO Appointment VALUES(69879231,100000003,103,2,'2008-04-26 11:00','2008-04-26 12:00','C');
INSERT INTO Appointment VALUES(76983231,100000001,NULL,3,'2008-04-26 12:00','2008-04-26 13:00','C');
INSERT INTO Appointment VALUES(86213939,100000004,102,9,'2008-04-27 10:00','2008-04-21 11:00','A');
INSERT INTO Appointment VALUES(93216548,100000002,101,2,'2008-04-27 10:00','2008-04-27 11:00','B');

INSERT INTO Medication VALUES(1,'Procrastin-X','X','N/A');
INSERT INTO Medication VALUES(2,'Thesisin','Foo Labs','N/A');
INSERT INTO Medication VALUES(3,'Awakin','Bar Laboratories','N/A');
INSERT INTO Medication VALUES(4,'Crescavitin','Baz Industries','N/A');
INSERT INTO Medication VALUES(5,'Melioraurin','Snafu Pharmaceuticals','N/A');

INSERT INTO Prescribes VALUES(1,100000001,1,'2008-04-24 10:47',13216584,'5');
INSERT INTO Prescribes VALUES(9,100000004,2,'2008-04-27 10:53',86213939,'10');
INSERT INTO Prescribes VALUES(9,100000004,2,'2008-04-30 16:53',NULL,'5');

INSERT INTO Block VALUES(1,1);
INSERT INTO Block VALUES(1,2);
INSERT INTO Block VALUES(1,3);
INSERT INTO Block VALUES(2,1);
INSERT INTO Block VALUES(2,2);
INSERT INTO Block VALUES(2,3);
INSERT INTO Block VALUES(3,1);
INSERT INTO Block VALUES(3,2);
INSERT INTO Block VALUES(3,3);
INSERT INTO Block VALUES(4,1);
INSERT INTO Block VALUES(4,2);
INSERT INTO Block VALUES(4,3);

INSERT INTO Room VALUES(101,'Single',1,1,0);
INSERT INTO Room VALUES(102,'Single',1,1,0);
INSERT INTO Room VALUES(103,'Single',1,1,0);
INSERT INTO Room VALUES(111,'Single',1,2,0);
INSERT INTO Room VALUES(112,'Single',1,2,1);
INSERT INTO Room VALUES(113,'Single',1,2,0);
INSERT INTO Room VALUES(121,'Single',1,3,0);
INSERT INTO Room VALUES(122,'Single',1,3,0);
INSERT INTO Room VALUES(123,'Single',1,3,0);
INSERT INTO Room VALUES(201,'Single',2,1,1);
INSERT INTO Room VALUES(202,'Single',2,1,0);
INSERT INTO Room VALUES(203,'Single',2,1,0);
INSERT INTO Room VALUES(211,'Single',2,2,0);
INSERT INTO Room VALUES(212,'Single',2,2,0);
INSERT INTO Room VALUES(213,'Single',2,2,1);
INSERT INTO Room VALUES(221,'Single',2,3,0);
INSERT INTO Room VALUES(222,'Single',2,3,0);
INSERT INTO Room VALUES(223,'Single',2,3,0);
INSERT INTO Room VALUES(301,'Single',3,1,0);
INSERT INTO Room VALUES(302,'Single',3,1,1);
INSERT INTO Room VALUES(303,'Single',3,1,0);
INSERT INTO Room VALUES(311,'Single',3,2,0);
INSERT INTO Room VALUES(312,'Single',3,2,0);
INSERT INTO Room VALUES(313,'Single',3,2,0);
INSERT INTO Room VALUES(321,'Single',3,3,1);
INSERT INTO Room VALUES(322,'Single',3,3,0);
INSERT INTO Room VALUES(323,'Single',3,3,0);
INSERT INTO Room VALUES(401,'Single',4,1,0);
INSERT INTO Room VALUES(402,'Single',4,1,1);
INSERT INTO Room VALUES(403,'Single',4,1,0);
INSERT INTO Room VALUES(411,'Single',4,2,0);
INSERT INTO Room VALUES(412,'Single',4,2,0);
INSERT INTO Room VALUES(413,'Single',4,2,0);
INSERT INTO Room VALUES(421,'Single',4,3,1);
INSERT INTO Room VALUES(422,'Single',4,3,0);
INSERT INTO Room VALUES(423,'Single',4,3,0);

INSERT INTO On_Call VALUES(101,1,1,'2008-11-04 11:00','2008-11-04 19:00');
INSERT INTO On_Call VALUES(101,1,2,'2008-11-04 11:00','2008-11-04 19:00');
INSERT INTO On_Call VALUES(102,1,3,'2008-11-04 11:00','2008-11-04 19:00');
INSERT INTO On_Call VALUES(103,1,1,'2008-11-04 19:00','2008-11-05 03:00');
INSERT INTO On_Call VALUES(103,1,2,'2008-11-04 19:00','2008-11-05 03:00');
INSERT INTO On_Call VALUES(103,1,3,'2008-11-04 19:00','2008-11-05 03:00');

INSERT INTO Stay VALUES(3215,100000001,111,'2008-05-01','2008-05-04');
INSERT INTO Stay VALUES(3216,100000003,123,'2008-05-03','2008-05-14');
INSERT INTO Stay VALUES(3217,100000004,112,'2008-05-02','2008-05-03');

INSERT INTO Undergoes VALUES(100000001,6,3215,'2008-05-02',3,101);
INSERT INTO Undergoes VALUES(100000001,2,3215,'2008-05-03',7,101);
INSERT INTO Undergoes VALUES(100000004,1,3217,'2008-05-07',3,102);
INSERT INTO Undergoes VALUES(100000004,5,3217,'2008-05-09',6,NULL);
INSERT INTO Undergoes VALUES(100000001,7,3217,'2008-05-10',7,101);
INSERT INTO Undergoes VALUES(100000004,4,3217,'2008-05-13',3,103);

INSERT INTO Trained_In VALUES(3,1,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,2,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,5,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,6,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(3,7,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(6,2,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(6,5,'2007-01-01','2007-12-31');
INSERT INTO Trained_In VALUES(6,6,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,1,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,2,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,3,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,4,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,5,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,6,'2008-01-01','2008-12-31');
INSERT INTO Trained_In VALUES(7,7,'2008-01-01','2008-12-31');


Questions
-- 8.1 Obtain the names of all physicians that have performed a medical procedure they have never been certified to perform.


WITH  code_of_physician_without_training AS (
SELECT Physician as Physician_without_training
FROM Undergoes 
WHERE Procedure NOT IN(SELECT Treatment
FROM Trained_in WHERE Physician_without_training=Physician))

SELECT P.Name
FROM code_of_physician_without_training C JOIN Physician P
ON C.Physician_without_training=p.EmployeeID;

-- 8.2 Same as the previous query, but include the following information in the results:
-- Physician name, name of procedure, date when the procedure was carried out, name of the patient the procedure was carried out on.



WITH one AS(
SELECT Patient, Procedure, Date, Physician AS Physician_without_training
FROM Undergoes
WHERE Procedure NOT IN(SELECT Treatment
FROM Trained_in WHERE Physician_without_training=Physician))


SELECT O.Date, P.Name AS Physician_name, Pat.Name AS Patient_name, Proc.Name AS Procedure_name
FROM one O 
JOIN Physician P ON O.Physician_without_training=p.EmployeeID
JOIN Patient Pat ON o.Patient=Pat.SSN
JOIN Procedures Proc ON o.Procedure=Proc.Code;




-- 8.3 Obtain the names of all physicians that have performed a medical procedure that they are certified to perform,
-- but such that the procedure was done at a date (Undergoes.Date) after the physician's certification expired (Trained_In.CertificationExpires).



WITH  code_of_physicians_with_training AS (
SELECT Physician as Physician_with_training, Procedure, Date as Procedure_date, Physician
FROM Undergoes 
WHERE Procedure IN(SELECT Treatment
FROM Trained_in WHERE Physician_with_training=Physician)), 

one AS (
SELECT C.Physician_with_training, C.Procedure_date, T.CertificationExpires
FROM code_of_physicians_with_training C JOIN Trained_IN T
ON C.Physician_with_training=T.Physician
WHERE C.Procedure_date> T.CertificationExpires)


SELECT P.Name, O.Procedure_date, O.CertificationExpires
FROM one O JOIN Physician P
ON O.Physician_with_training=p.EmployeeID;



-- 8.4 Same as the previous query, but include the following information in the results: 
--Physician name, name of procedure, date when the procedure was carried out,
-- name of the patient the procedure was carried out on, and date when the certification expired.

WITH  code_of_physicians_with_training AS (
SELECT Physician as Physician_with_training, Procedure, Date as Procedure_date, Patient
FROM Undergoes 
WHERE Procedure IN(SELECT Treatment
FROM Trained_in WHERE Physician_with_training=Physician)),

one AS (
SELECT C.Physician_with_training AS Physician_with_expired_training, C.Procedure AS Procedure_code, C.Procedure_date,C.Patient AS Patient_code, T.CertificationExpires
FROM code_of_physicians_with_training C JOIN Trained_IN T
ON C.Physician_with_training=T.Physician
WHERE C.Procedure_date> T.CertificationExpires)




SELECT P.Name AS Physician_name, O.Procedure_date, O.CertificationExpires, Proc.Name AS Procedure_name, Pat.Name AS Patient_name
FROM one O 
JOIN Physician P ON O.Physician_with_expired_training=p.EmployeeID
JOIN Procedures Proc ON O.Procedure_code=Proc.Code
JOIN Patient Pat ON O.Patient_code=Pat.SSN;


-- 8.5 Obtain the information for appointments where a patient met with a physician other than his/her primary care physician.
-- Show the following information: Patient name, physician name, nurse name (if any), start and end time of appointment,
-- examination room, and the name of the patient's primary care physician.

WITH one AS (
SELECT Patient AS Patient_id, PrepNurse as Nurse_code, Physician AS Not_a_primary_physician, Start, End, ExaminationRoom
FROM Appointment
WHERE Physician NOT IN (SELECT PCP FROM Patient WHERE PCP=Physician)),

two AS(
SELECT P.Name AS Patient_name, N.Name AS Nurse_name, PH.Name AS Physician_name, O.Start, O.End, P.PCP AS Primary_physician, O.ExaminationRoom
From one O
LEFT JOIN Patient P ON O.Patient_ID=P.SSN
LEFT JOIN Nurse N ON O.Nurse_code=N.EmployeeID
LEFT JOIN Physician PH ON PH.EmployeeID=O.Not_a_primary_physician)

SELECT T.Patient_name, T.Nurse_name, T.Physician_name AS Physician_who_did_procedure, T.Start, T.End,PH.Name AS Primary_physician_name, T.ExaminationRoom
FROM two T LEFT JOIN Physician PH ON T.Primary_physician=PH.EmployeeID;


-- 8.7 Obtain the names of all the nurses who have ever been on call for room 123.

SELECT *
FROM Room
WHERE Number=123;

SELECT OC.Nurse, N.Name, OC.BlockFloor, OC.BlockCode
FROM On_Call OC
LEFT JOIN Nurse N ON OC.Nurse=N.EmployeeID
WHERE BLockCode IN (
SELECT BlockCode
FROM Room
WHERE Number=123) 
AND BlockFloor IN (
SELECT BlockFloor FROM Room WHERE NUmber=123)

-- 8.8 The hospital has several examination rooms where appointments take place. 
--Obtain the number of appointments that have taken place in each examination room.


SELECT COUNT(*) AS Number_of_examinations, ExaminationRoom
FROM Appointment
GROUP BY ExaminationRoom

-- 8.9 Obtain the names of all patients and their primary care physician, such that the following are true:
    -- The patient has been prescribed some medication by his/her primary care physician.
    -- The patient has undergone a procedure with a cost larger that $5,000
    -- The patient has had at least two appointments where the nurse who prepared the appointment was a registered nurse.
    -- The patient's primary care physician is not the head of any department.

WITH one AS (	
SELECT P.SSN as Patient_code, P.Name as Patient_name, P.PCP as Primary_physician_code,Ph.Name as Physician_name 
FROM Patient P LEFT JOIN Physician Ph
ON P.PCP=Ph.EmployeeID
WHERE Primary_physician_code IN (SELECT Physician FROM Prescribes WHERE Patient=Patient_code)),


two AS (
SELECT O.Patient_code, O.Patient_name, O.Primary_physician_code, O.Physician_name, U. Procedure
FROM one O JOIN Undergoes U
ON O.Patient_code= U.Patient),

three AS (SELECT *
FROM two T JOIN Procedures P
ON P.Code=T.Procedure
WHERE P.Cost>5000),

four AS (
SELECT *
FROM Appointment JOIN Nurse
ON Nurse.EmployeeID=Appointment.PrepNurse
WHERE Nurse.Registered=1
GROUP BY Appointment.Patient
HAVING COUNT(*)>1)

SELECT T.Patient_name, T.Physician_name
FROM Three T JOIN Four F
ON F.Patient=T.Patient_code
WHERE T.Primary_physician_code NOT IN (SELECT Head FROM Department);




++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++DAY 9++++++++++++++++++++++++++++++++++++++++++++++++++++++++



UPDATE cran_logs_2015_01_01
SET download_date = LTRIM(download_date, '"')
WHERE download_date LIKE '"%';

UPDATE cran_logs_2015_01_01
SET ip_id = RTRIM(ip_id, '"')
WHERE ip_id LIKE '%"';


-- 9.1 Give the package name and how many times they're downloaded. Order by highest to lowest number of times downloaded.
-- 9.2 Give the package ranking (based on how many times it was downloaded) during 9AM to 11AM

WITH first AS (
SELECT package, Count(*) AS Count_of_download
FROM  cran_logs_2015_01_01
WHERE strftime('%H:%M:%S', time) BETWEEN '09:00:00' AND '11:00:00'
GROUP BY package
ORDER BY Count_of_download DESC)

SELECT  package, Count_of_download,DENSE_RANK() OVER (ORDER BY Count_of_download) AS Rank
FROM first;


-- 9.3 How many records (downloads) are from China ("CN") or Japan("JP") or Singapore ("SG")?

SELECT 
(SELECT COUNT (*) FROM cran_logs_2015_01_01 WHERE country='CN') AS CN_count, 
(SELECT COUNT (*) FROM cran_logs_2015_01_01 WHERE country='JP') AS JP_count, 
(SELECT COUNT (*) FROM cran_logs_2015_01_01 WHERE country='SG') AS SG_count, 
COUNT (*) AS Total_count_CN_JP_SG
FROM cran_logs_2015_01_01
WHERE country='CN' OR
country='JP' OR
country='SG';



-- 9.4 Print the countries whose downloads are more than the downloads from China ("CN")

SELECT country, count(*) AS count_of_downloads
FROM cran_logs_2015_01_01
Group By country
HAVing count_of_downloads > (SELECT COUNt(*) FROM cran_logs_2015_01_01 WHERE country='CN')
ORDER BY count_of_downloads DESC;


--9.5 Print the length of each package name for packages which appear only once. 
-- In the same query, show the average length of all such packages.

WITH avg_length AS (
 SELECT AVG (LENGTH(package)) as avg_length
 FROM cran_logs_2015_01_01
 WHERE package IN(SELECT package FROM cran_logs_2015_01_01 GROUP BY package HAVING COUNT(*)=1))



SELECT LENGTH(package) AS package_length,package, (SELECT avg_length FROM avg_length) AS avg_length
FROM cran_logs_2015_01_01
WHERE package IN(SELECT package FROM cran_logs_2015_01_01 GROUP BY package HAVING COUNT(*)=1)
ORDER BY package_length DESC



-- 9.6 Get the package whose download count ranks 2nd (print package name and its download count).
with one as(
SELECT package, count(*) AS download_count
FROM cran_logs_2015_01_01
GROUP BY package), 

two as (
SELECT package, download_count, DENSE_RANK() OVER(ORDER BY download_count) as rank
FROM one)

SELECT package, download_count
FROM two
WHERE rank=2;


-- 9.7 Print the name of the package whose download count is bigger than 1000.

SELECT package, count(*) AS download_count
FROM cran_logs_2015_01_01
GROUP BY package
HAVING download_count>1000


-- 9.8 The field "r_os" is the operating system of the users.
-- Here we would like to know what main system we have (ignore version number), the relevant counts, and the proportion (in percentage).
--Hint: to write a query which can ignore the version number, try this: https://github.com/asg017/sqlite-regex)
with one as (
SELECT r_os,
       CASE
           WHEN r_os REGEXP 'darwin' THEN 'darwin'
           WHEN r_os REGEXP 'linux' THEN 'linux'
           WHEN r_os REGEXP 'mingw32' THEN 'mingw32'
           ELSE 'Other'
       END AS r_os_type
FROM cran_logs_2015_01_01)

SELECT 
    r_os_type, 
    COUNT(*) AS os_count,
    CAST(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM one) AS INT) AS percentage
FROM one
GROUP BY r_os_type
ORDER BY os_count;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ day 10++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CREATE TABLE PEOPLE (id INTEGER, name CHAR);

INSERT INTO PEOPLE VALUES(1, "A");
INSERT INTO PEOPLE VALUES(2, "B");
INSERT INTO PEOPLE VALUES(3, "C");
INSERT INTO PEOPLE VALUES(4, "D");

CREATE TABLE ADDRESS (id INTEGER, address CHAR, updatedate date);

INSERT INTO ADDRESS VALUES(1, "address-1-1", "2016-01-01");
INSERT INTO ADDRESS VALUES(1, "address-1-2", "2016-09-02");
INSERT INTO ADDRESS VALUES(2, "address-2-1", "2015-11-01");
INSERT INTO ADDRESS VALUES(3, "address-3-1", "2016-12-01");
INSERT INTO ADDRESS VALUES(3, "address-3-2", "2014-09-11");
INSERT INTO ADDRESS VALUES(3, "address-3-3", "2015-01-01");
INSERT INTO ADDRESS VALUES(4, "address-4-1", "2010-05-21");
INSERT INTO ADDRESS VALUES(4, "address-4-2", "2012-02-11");
INSERT INTO ADDRESS VALUES(4, "address-4-3", "2015-04-27");
INSERT INTO ADDRESS VALUES(4, "address-4-4", "2014-01-01");



-- 10.1 Join table PEOPLE and ADDRESS, but keep only one address information for each person (we don't mind which record we take for each person). 
    -- i.e., the joined table should have the same number of rows as table PEOPLE
	
SELECT *
FROM people LEFT JOIN address
oN PEOPLE.id=address.id
GROUP BY people.id
	
	
-- 10.2 Join table PEOPLE and ADDRESS, but ONLY keep the LATEST address information for each person. 
    -- i.e., the joined table should have the same number of rows as table PEOPLE
with one as (
SELECT DENSE_RANK()OVER(partition by id ORDER BY updatedate DESC)as rank_use, id, address, updatedate
FROM ADDRESS)

SELECT id, address, updatedate
from one
where rank_use=1

 